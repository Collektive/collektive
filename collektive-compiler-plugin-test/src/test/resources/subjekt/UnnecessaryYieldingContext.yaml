---
name: UnnecessaryYieldingContext
config:
  codePreamble: |-
    /*
     * This file has been auto-generated with Subjekt (https://github.com/FreshMag/subjekt).
     */
    import it.unibo.collektive.aggregate.api.Aggregate
    import it.unibo.collektive.aggregate.api.neighboring
    import it.unibo.collektive.aggregate.api.exchanging
    import it.unibo.collektive.aggregate.api.neighboring
    import it.unibo.collektive.aggregate.api.share
    import it.unibo.collektive.aggregate.api.sharing
    import it.unibo.collektive.aggregate.*
    import it.unibo.collektive.stdlib.collapse.*
    import kotlin.math.floor

parameters:
  - name: UNNECESSARY_YIELDING_SIMPLE
    values:
      - |-
        evolving(initial) {
            it.yielding { it }
        }
      - |-
        exchanging(initial) { 
          it.yielding { it }
        }
      - |-
        sharing(initial) {
          it.neighbors.values.max(initial).yielding { it.neighbors.values.max(initial) }
        }

  - name: UNNECESSARY_YIELDING_COMPLEX
    values:
      - |-
        evolving(initial) {
          val value = it + 1
          floor(value.toDouble()).toInt().yielding { floor(value.toDouble()).toInt() }
        }
      - |-
        exchanging(initial) { neighborhood ->
          val field = neighborhood.mapValues { it / 2.toDouble() }
          field.mapValues(::floor)
            .mapValues { it.toInt() }
            .yielding { field.mapValues(::floor).mapValues { it.toInt() } }
        }
      - |-
        sharing(initial) {
          val maxValue = it.neighbors.values.max(0)
          floor(maxValue.toDouble() / 2).toInt().yielding { floor(maxValue.toDouble() / 2).toInt() }
        }

  - name: NECESSARY_YIELDING
    values:
      - |-
        evolving(initial) {
          it.yielding { it + 1 }
        }
      - |-
        exchanging(initial) { field ->
          field.yielding { field.mapValues { it + 1 } }
        }
      - |-
        sharing(initial) {
          val maxValue = it.neighbors.values.max(0)
          maxValue.yielding { maxValue + 1 }
        }

  - name: NECESSARY_YIELDING_DIFFERENT_TYPE
    values:
      - |-
        evolving(initial) {
          it.yielding { "Test$it" }
        }
      - |-
        exchanging(initial) { field ->
          field.yielding { field.mapValues { "Test${it + 1}" } }
        }
      - |-
        sharing(initial) {
          val maxValue = it.neighbors.values.max(0)
          maxValue.yielding { "Test${maxValue + 1}" }
        }  

macros:
  def: aggregateBlock(specificCode)
  values:
    - |-
      fun Aggregate<Int>.entry() {
        val initial = 0
        ${{ specificCode }}
      }

subjects:
  - name: UnnecessaryYielding${{ prettify(UNNECESSARY_YIELDING_SIMPLE) }}Simple
    code: ${{ aggregateBlock(UNNECESSARY_YIELDING_SIMPLE) }}

  - name: UnnecessaryYielding${{ prettify(UNNECESSARY_YIELDING_COMPLEX) }}Complex
    code: ${{ aggregateBlock(UNNECESSARY_YIELDING_COMPLEX) }}

  - name: NecessaryYielding${{ prettify(NECESSARY_YIELDING) }}
    code: ${{ aggregateBlock(NECESSARY_YIELDING) }}

  - name: NecessaryYieldingDifferentType${{ prettify(NECESSARY_YIELDING_DIFFERENT_TYPE) }}
    code: ${{ aggregateBlock(NECESSARY_YIELDING_DIFFERENT_TYPE) }}