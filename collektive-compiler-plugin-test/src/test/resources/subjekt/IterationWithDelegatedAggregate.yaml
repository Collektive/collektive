name: "Invalid iteration of aggregate calls when using delegated functions"
config:
  codePreamble: |-
    /**
      * This file has been auto-generated with Subjekt (https://github.com/FreshMag/subjekt).
    */
    import it.unibo.collektive.aggregate.api.Aggregate
    import it.unibo.collektive.aggregate.api.neighboring

import:
  "src/test/resources/subjekt/Macros.yaml"

parameters:
  name: "AGGREGATE"
  value: neighboring(0)

subjects:
  - name: IterationAlignDelegate${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.${{ AGGREGATE }}
      }
      
      fun Aggregate<Int>.entry() {
        ${{ loop(alignedOn("delegate(this)")) }}
      }
    outcomes:
      warning: |-
        Function '${{ AGGREGATE }}', that accepts and uses an aggregate argument, has been called inside a loop 
        construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element, either at the call site
        or inside the '${{ AGGREGATE }}' function declaration, wrapping the involved aggregate calls.

  - name: IterationDelegateAlign${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.${{ alignedOn("aggregate." + AGGREGATE) }}
      }
      
      fun Aggregate<Int>.entry() {
         ${{ loop('delegate(this)') }}
      }
    outcomes:
      warning: |-
        Function 'delegate', that accepts and uses an aggregate argument, has been called inside a loop 
        construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element at the call site.

  - name: IterationDelegate${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.${{ AGGREGATE }}
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Function '${{ AGGREGATE }}', that accepts and uses an aggregate argument, has been called inside a loop 
        construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element, either at the call site
        or inside the '${{ AGGREGATE }}' function declaration, wrapping the involved aggregate calls.

  - name: IterationDelegateWithNestedFun${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          fun nested() {
            aggregate.${{ AGGREGATE }}
          }
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Function 'delegate' has been called inside a loop construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element.

  - name: IterationRecursiveDelegate${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        delegate2(aggregate)
      }
      
      fun delegate2(aggregate: Aggregate<Int>) {
        aggregate.${{ AGGREGATE }}
      }
      
      fun Aggregate<Int>.entry() {
        ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Function '${{ AGGREGATE }}', that accepts and uses an aggregate argument, has been called inside a loop 
        construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element, either at the call site
        or inside the '${{ AGGREGATE }}' function declaration, wrapping the involved aggregate calls.

  - name: IterationRecursiveDelegateAlign${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        delegate2(aggregate)
      }
      
      fun delegate2(aggregate: Aggregate<Int>) {
        aggregate.alignedOn(0) {
          aggregate.${{ AGGREGATE }}
        }
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Aggregate function 'delegate' has been called inside a loop construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element.

  - name: IterationAlignRecursiveDelegate${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        aggregate.alignedOn(0) {
          delegate2(aggregate)
        }
      }
      
      fun delegate2(aggregate: Aggregate<Int>) {
          aggregate.${{ AGGREGATE }}
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Aggregate function 'delegate' has been called inside a loop construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element.

  - name: IterationDelegatedNestedFun${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.${{ AGGREGATE }}
        }
        delegate2()
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
    outcomes:
      warning: |-
        Function '${{ AGGREGATE }}', that accepts and uses an aggregate argument, has been called inside a loop 
        construct without explicit alignment.
        The same path may generate interactions more than once, leading to ambiguous alignment.

        Consider wrapping the function into the 'alignedOn' method with a unique element, either at the call site
        or inside the '${{ AGGREGATE }}' function declaration, wrapping the involved aggregate calls.

  - name: IterationDelegatedNestedFunAlign${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.alignedOn(0) {
            aggregate.${{ AGGREGATE }}
          }
        }
        delegate2()
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }

  - name: IterationAlignDelegatedNestedFun${{ prettify(AGGREGATE, loop(AGGREGATE)) }}
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.${{ AGGREGATE }}
        }
        aggregate.alignedOn(0) {
          delegate2()
        }
      }
      
      fun Aggregate<Int>.entry() {
          ${{ loop("delegate(this)") }}
      }
