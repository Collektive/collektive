network-model:
  type: ConnectWithinDistance
  parameters: [ 5 ]

incarnation: collektive

_pool: &program
  - time-distribution: 1
    program:
      name: Gradient
      code: |
        package my.test
        import it.unibo.alchemist.model.Position
        import it.unibo.alchemist.collektive.device.CollektiveDevice
        
        import it.unibo.alchemist.collektive.device.DistanceSensor
        import it.unibo.collektive.aggregate.api.Aggregate
        import it.unibo.collektive.aggregate.api.operators.share
        import it.unibo.collektive.field.operations.min
        import it.unibo.collektive.stdlib.doubles.FieldedDoubles.plus
        import kotlin.Double.Companion.POSITIVE_INFINITY

        fun Aggregate<Int>.gradient(distanceSensor: DistanceSensor, source: Boolean): Double =
          share(POSITIVE_INFINITY) {
            val dist = with(distanceSensor) { distances() }
            when {
              source -> 0.0
              else -> (it + dist).min(POSITIVE_INFINITY)
            }
          }
      entrypoint: gradient(device, localId == 0)

deployments:
  - type: Rectangle
    parameters: [ 200, 0, 0, 20, 20 ]
    programs:
      - *program
    contents:
      - molecule: source
        concentration: false
  - type: Point
    parameters: [ 2, 2 ]
    programs:
      - *program
    contents:
      - molecule: source
        concentration: true
